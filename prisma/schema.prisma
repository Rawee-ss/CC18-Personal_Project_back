// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String?
  lastName  String?
  birthday  DateTime?  @db.Timestamp()
  image     String?
  userName  String     @unique @map("user_name")
  password  String
  email     String?    @unique
  role      Role       @default(USER)
  favorite  Favorite[]
  store     Store[]
  cart      Cart[]
  orders    Orders[]
}

enum Role {
  ADMIN
  USER
}

model Products {
  id         Int         @id @default(autoincrement())
  name       String
  detail     String
  price      Decimal     @db.Decimal(10, 2)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  isDelete   Boolean     @default(false)
  categoryId Int         @map("category_id")
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favorite   Favorite[]
  store      Store[]
  orderItem  OrderItem[]
  cartItem   CartItem[]
  image      Image[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  price      Float
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  ordersId   Int      @map("orders_id")
  orders     Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade)

  @@map("order_item")
}

model Orders {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  totalPrice    Decimal       @map("total_price") @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  slip          String
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)
  userId        Int           @map("user_id")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartId        Int
  cart          Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderItem     OrderItem[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAIL

  @@map("payment_status")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  products Products[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}

model Store {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  status     Status   @default(UNINSTALL)
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}

enum Status {
  INSTALL
  UNINSTALL
}

model Cart {
  id        Int        @id @default(autoincrement())
  cartTotal Float
  userId    Int        @map("user_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItem  CartItem[]
  orders    Orders[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  price      Float
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  cartId     Int      @map("cart_id")
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_item")
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int
}
