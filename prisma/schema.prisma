// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  name     String?
  image    String?
  userName String     @unique @map("user_name")
  password String
  email    String?
  role     Role       @default(USER)
  favorite Favorite[]
  store    Store[]
  cart     Cart[]
  orders   Orders[]
}

enum Role {
  ADMIN
  USER
}

model Products {
  id         Int         @id @default(autoincrement())
  name       String
  image      String
  detail     String
  price      Decimal     @db.Decimal(10, 2)
  createAt   DateTime    @default(now()) @map("create_at") @db.Timestamp(0)
  categoryId Int         @map("category_id")
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Favorite   Favorite[]
  store      Store[]
  cart       Cart[]
  orderItem  OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
  ordersId   Int      @map("orders_id")
  orders     Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade)

  @@map("order_item")
}

model Orders {
  id          Int          @id @default(autoincrement())
  createAt    DateTime     @default(now()) @map("create_at") @db.Timestamp(0)
  totalPrice  Decimal      @map("total_price") @db.Decimal(10, 2)
  userId      Int          @map("user_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItem   OrderItem[]
  transaction Transaction?
}

model Transaction {
  id            Int           @id @default(autoincrement())
  slip          String        @unique
  createAt      DateTime      @default(now()) @map("create_at") @db.Timestamp(0)
  updateAt      DateTime      @updatedAt @map("update_at") @db.Timestamp(0)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  ordersId      Int           @unique @map("orders_id")
  orders        Orders        @relation(fields: [ordersId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED

  @@map("payment_status")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  products Products[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}

model Store {
  id         Int      @id @default(autoincrement())
  createAt   DateTime @default(now()) @map("create_at") @db.Timestamp(0)
  status     Status   @default(UNINSTALL)
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}

enum Status {
  INSTALL
  UNINSTALL
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsId Int      @map("products_id")
  products   Products @relation(fields: [productsId], references: [id], onDelete: Cascade)
}
